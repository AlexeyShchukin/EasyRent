name: CI/CD Workflow (DockerHub + AWS EC2 via EIC)

on:
  push:
    branches: [main]

concurrency:
  group: deploy-main
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APP_DIR: ${{ secrets.APP_DIR }}
      RAW: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/app:latest .

      - name: Login to Docker Hub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/app:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      - name: Resolve AZ Instance
        id: az
        run: |
          AZ=$(aws ec2 describe-instances \
          --instance-ids "${{secrets.EC2_INSTANCE_ID}}" \
          --query 'Reservations[0].Instances[0].Placement.AvailabilityZone' \
          --output text)
          
          echo "AZ=$AZ"
          echo "AZ=$AZ" >> $GITHUB_OUTPUT

      - name: Build && Push Ephemeral SSH key via EC2 Instance Connect(EIC)
        run: |
          ssh-keygen -t ed25519 -N '' -f eic_key -C "gh-actions-ephemeral"
          aws ec2-instance-connect send-ssh-public-key \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --availability-zone "${{ steps.az.outputs.AZ }}" \
            --instance-os-user "$EC2_USER" \
            --ssh-public-key "$(tr -d '\r' < eic_key.pub)"

      - name: Trust EC2 Ephemeral Key
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          touch ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
          ssh-keyscan -T 10 -H "$RAW" >> ~/.ssh/known_hosts
          IP=$(getent hosts "$RAW" | awk '/STREAM/ {print $1; exit}') || true
          if [ -n "${IP:-}" ]; then ssh-keyscan -T 10 -H "$IP" >> ~/.ssh/known_hosts || true; fi

      - name: Prepare AWS Instance With Required Tools
        run: |
          ssh -i eic_key -o IdentitiesOnly=yes "$EC2_USER"@"$RAW" bash -s <<EOSH
          
          set -euo pipefail
          
          if command -v apt-get >/dev/null 2>&1; then
              PM="apt-get"
              UPDATE="sudo apt-get update -y"
              INSTALL="sudo apt-get install -y"
          elif command -v apt >/dev/null 2>&1; then
              PM=apt
              UPDATE="sudo apt update -y"
              INSTALL="sudo apt install -y"
          elif command -v dnf >/dev/null 2>&1; then
              PM="dnf"
              UPDATE="sudo dnf makecache"
              INSTALL="sudo dnf install -y"
          elif command -v yum >/dev/null 2>&1; then
              PM="yum"
              UPDATE="sudo yum makecache"
              INSTALL="sudo yum install -y"
          else
              echo "Unsupported OS"
              exit 1
          fi
          
          echo "Using package manager: $PM"
          $UPDATE
          
          for pkg in git rsync curl docker.io; do
              if ! command -v $pkg >/dev/null 2>&1; then
                  $INSTALL $pkg
              fi
          done

          if command -v systemctl >/dev/null 2>&1; then
              sudo systemctl enable --now docker || true
          fi
          
          sudo usermod -aG docker "$EC2_USER" || true
          
          if ! docker compose version >/dev/null 2>&1; then
            sudo mkdir -p /usr/local/lib/docker/cli-plugins
            sudo curl -sSL "https://github.com/docker/compose/releases/download/v2.39.2/docker-compose-linux-x86_64" \
            -o /usr/local/lib/docker/cli-plugins/docker-compose
          
            sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            docker compose version
          fi
          
          docker --version || true
          git --version || true
          rsync --version | head -n 1 || true
          
          sudo install -d  -o "$EC2_USER" -g "$EC2_USER" -m 755 "$APP_DIR"
          EOSH

      - name: Create .env file
        run: |
          cat > .env <<'EOF'
          DEBUG=${{ secrets.DEBUG }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALLOWED_HOSTS="${{ secrets.ALLOWED_HOSTS }},app"
          DB_NAME=${{ secrets.DB_NAME }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          EOF

      - name: Upload .env file to AWS EC2 Instance
        run: |
          scp -i eic_key -o IdentitiesOnly=yes .env "$EC2_USER"@"$RAW":"$APP_DIR"/.env

      - name: Deploy to AWS EC2 Instance && (re)start containers
        run: |
          ssh -i eic_key -o IdentitiesOnly=yes "$EC2_USER"@"$RAW" bash -s <<EOSH
          set -euo pipefail
          
          cd "$APP_DIR"
          sudo docker compose -f docker-compose-prod.yml pull
          sudo docker compose -f docker-compose-prod.yml --env-file .env up -d
          sudo docker system prune -f
          EOSH

      - name: Show AWS EC2 Running Containers
        run: |
          ssh -i eic_key -o IdentitiesOnly=yes "$EC2_USER"@"$RAW" \
          "sudo docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.CreatedAt}}'"